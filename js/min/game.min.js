


/* =============================================================

	Buoy v1.2
	A simple vanilla JS micro-library by Chris Ferdinandi.
	http://gomakethings.com

	Class handlers by Todd Motto.
	https://github.com/toddmotto/apollo

	Module pattern by Keith Rousseau.
	https://twitter.com/keithtri

	Free to use under the MIT License.
	http://gomakethings.com/mit/

 * ============================================================= */

window.buoy = (function (window, document, undefined) {

	'use strict';

	// Check for classList support
	var classList = document.documentElement.classList;

	// Check if an element has a class
	var hasClass = function (elem, className) {
		if ( classList ) {
			return elem.classList.contains(className);
		} else {
			return new RegExp('(^|\\s)' + className + '(\\s|$)').test(elem.className);
		}
	};

	// Add a class to an element
	var addClass = function (elem, className) {
		if ( !hasClass(elem, className) ) {
			if ( classList ) {
				elem.classList.add(className);
			} else {
				elem.className += (elem.className ? ' ' : '') + className;
			}
		}
	};

	// Remove a class from an element
	var removeClass = function (elem, className) {
		if (hasClass(elem, className)) {
			if ( classList ) {
				elem.classList.remove(className);
			} else {
				elem.className = elem.className.replace(new RegExp('(^|\\s)*' + className + '(\\s|$)*', 'g'), '');
			}
		}
	};

	// Toggle a class on an element
	var toggleClass = function (elem, className) {
		if ( classList ) {
			elem.classList.toggle(className);
		} else {
			if ( hasClass(elem, className ) ) {
				removeClass(elem, className);
			}
			else {
				addClass(elem, className);
			}
		}
	};

	// Get siblings of an element
	var getSiblings = function (elem) {
		var siblings = [];
		var sibling = elem.parentNode.firstChild;
		var skipMe = elem;
		for ( ; sibling; sibling = sibling.nextSibling ) {
			if ( sibling.nodeType == 1 && sibling != elem ) {
				siblings.push( sibling );
			}
		}
		return siblings;
	};

	// Return functions
	return {
		toggleClass: toggleClass,
		removeClass: removeClass,
		addClass: addClass,
		hasClass: hasClass,
		getSiblings: getSiblings
	};

})(window, document);
document.addEventListener('DOMContentLoaded', function(){ 
	var deck;

	//Activate Overlay
	function overlayOn() {
		var o = document.querySelector('.overlay');
		buoy.addClass(o,'active');
	}

	// Clicking on a homepage button
	[].forEach.call(document.querySelectorAll('.home button'), function(el) {
	  el.addEventListener('click', function() {
		// Sets some main variables
		var m = document.querySelector('.overlay .modal');
		var game = document.querySelector('.game');
		var conn;
		var peer;

		function cancelConn() {
			peer.destroy();
			buoy.removeClass(m.parentNode,'active');
			buoy.removeClass(game,'active');
			m.innerHTML = '';
		}

		// Create Game
		if ( buoy.hasClass(this, 'create') ) {
			buoy.addClass(game,'active');
			overlayOn();

			// Randomly generate room ID and populate modal with info
			var roomid = Math.random().toString(36).substr(2, 5);
			m.innerHTML += '<h4>Your room id is...</h4>';
			m.innerHTML += '<h2>'+roomid+'</h2>';
			m.innerHTML += '<p>Give this code to your friend to join/watch!</p>';
			m.innerHTML += '<p class="light"><i class="fa fa-spinner"></i> Waiting for someone to join...';
			m.innerHTML += '<button class="cancel">Cancel</button>';

			// Set user as host of the room
			peer = new Peer('dwo'+roomid, {
				key: 'fbpvikd79qpsnhfr', debug:3
			});

			// Upon join
			peer.on('connection', function(c) { 
				conn = c;
				c.on('open', function() {
					// <TOADD: If first person to join (player) or not (watcher)> 
					buoy.removeClass(m.parentNode,'active');
					onMessage(c);
					playInit(c,deck);
				});
			});

			// Cancel!
			document.querySelector('.overlay .cancel').addEventListener('click', function(e) {
				cancelConn();
			});
		}
		// Join Game
		else if ( buoy.hasClass(this, 'join') && validDeck() ) {
			buoy.addClass(game,'active');
			overlayOn();
			m.innerHTML += '<h4>Enter Room ID to join:</h4>';
			m.innerHTML += '<input type="text">';
			m.innerHTML += '<button class="cancel">Cancel</button>';

			peer = new Peer({
				key: 'fbpvikd79qpsnhfr', debug:3
			});

			// Inputting a number will do the joining
			document.querySelector('.overlay input').addEventListener('keypress', function(e) {
				if (!e) e = window.event;
					var keyCode = e.keyCode || e.which;
					// If pressing enter
					if (keyCode == '13'){
						var room = this.value.replace(/\s+/g, '');
						conn = peer.connect( 'dwo'+room, { reliable: true } );

						conn.on('open', function() {
							buoy.removeClass(m.parentNode,'active');
							onMessage(conn);
							playInit(conn,deck);
						});
					return false;
				}
			});

			// Cancel!
			document.querySelector('.overlay .cancel').addEventListener('click', function(e) {
				cancelConn();
			});
		}
		// Build
		else if ( buoy.hasClass(this, 'build') ) {
			//overlayOn();
		}
	  });
	});

	validDeck = function(deck) {
		return true;
	}

	onMessage = function(conn) {
		conn.on('data', function(msg) {
			console.log(msg);
			if (msg.func === 'testCard') { testCard(msg.card, msg.action, msg.who) }
			else if (msg.func === 'odeck') { opponentDeck = msg.deck }
			else if (msg.func === 'drawCardConfirmed') { drawCardConfirmed(msg.card) }
			else if (msg.func === 'playCard') { playCard(msg.card, msg.who) }
		});
	};
});
var conn;
var opponentDeck;
var playerDeck;

// Define all the cards
var cardType = {
	'unit' : {
		'infantry' : { 'atk': 1, 'def': 1, 'sup': 0 },
		'recon' : { 'atk': 1, 'def': 2, 'sup': 1 },
		'apc' : { 'atk': 1, 'def': 2, 'sup': 1 },
		'aa' : { 'atk': 1, 'def': 2, 'sup': 1 },
		'tank' : { 'atk': 2, 'def': 2, 'sup': 2 },
		'htank' : { 'atk': 4, 'def': 5, 'sup': 5 },
		'arty' : { 'atk': 3, 'def': 1, 'sup': 3 },
		'harty' : { 'atk': 5, 'def': 3, 'sup': 5 },
		'drone' : { 'atk': 1, 'def': 1, 'sup': 1 },
		'helo' : { 'atk': 2, 'def': 2, 'sup': 2 },
		'a2g' : { 'atk': 2, 'def': 4, 'sup': 3 },
		'jet' : { 'atk': 0, 'def': 4, 'sup': 3 },
		'bomber' : { 'atk': 0, 'def': 3, 'sup': 4 },
		'hbomber' : { 'atk': 1, 'def': 4, 'sup': 5 }
	},
	'co' : {
		'urban' : 0,
		'tundra' : 0,
		'cloudy' : 0,
		'desert' : 0,
		'forest' : 0
	},		
	'supply' : 3
}

var properCards;

// Starts off the game and all the other functions
function playInit(connection, deck) {
	conn = connection;

	properCards = md5(cardType);

	var hashedDeck = {};
	deck = [
		{'type': 'infantry', 'id' : 0, 'hash' : 0}, 
		{'type': 'recon', 'id' : 0, 'hash' : 0}, 
		{'type': 'apc', 'id' : 0, 'hash' : 0},
		{'type': 'infantry', 'id' : 0, 'hash' : 0}, 
		{'type': 'recon', 'id' : 0, 'hash' : 0}, 
		{'type': 'apc', 'id' : 0, 'hash' : 0},
		{'type': 'infantry', 'id' : 0, 'hash' : 0}, 
		{'type': 'recon', 'id' : 0, 'hash' : 0}, 
		{'type': 'apc', 'id' : 0, 'hash' : 0},
		{'type': 'infantry', 'id' : 0, 'hash' : 0}, 
		{'type': 'recon', 'id' : 0, 'hash' : 0}, 
		{'type': 'apc', 'id' : 0, 'hash' : 0},
		{'type': 'infantry', 'id' : 0, 'hash' : 0}, 
		{'type': 'recon', 'id' : 0, 'hash' : 0}, 
		{'type': 'apc', 'id' : 0, 'hash' : 0},
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0},
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0},
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0},
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0}, 
		{'type': 'supply', 'id' : 0, 'hash' : 0}
	];

	deck = shuffle(deck);

	// Go through deck, hash, send
	var count = 8;
	for (var i=0;i<deck.length;i++) {

		// ID the cards
		var salt = Math.random().toString(36).substr(2, 9);
		deck[i].id = deck[i].type+'_'+salt;

		// Hash em
		var hash = md5(deck[i].id);
		deck[i].hash = hash;

		// Add hashed card to array
		hashedDeck[hash] = 1;

		// Once done hashing deck, send to opponent
		if (i===deck.length-1) {
			console.log('Sending hashed deck')
			conn.send( { 'func':'odeck', 'deck': hashedDeck } );
			drawCard(deck,count);
		}
	}

	// Shuffle array (deck)
	function shuffle(array) {
		var currentIndex = array.length
		, temporaryValue
		, randomIndex;

		// While there remain elements to shuffle...
		while (0 !== currentIndex) {

			// Pick a remaining element...
			randomIndex = Math.floor(Math.random() * currentIndex);
			currentIndex -= 1;

			// And swap it with the current element.
			temporaryValue = array[currentIndex];
			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}

		return array;
	}
}

// Play a card
function playCard(card,who) {
	var cardEl = document.getElementById(card.id);

	//var salt = card.getAttribute('id');
	//var type = card.getAttribute('data-type');

	// Remove card from hand
	if (who === 'player') cardEl.remove();

	if ( properCards === md5(cardType) ) {
		// Add card to field
		if (cardType.unit[card.type]) {
			var newUnit = document.querySelector('.'+who).appendChild( document.createElement('div') );
			buoy.addClass(newUnit,'unit');
			newUnit.data('type',card.type);

			function unitSprite() {
				// Change image based off card.type
			}
		} else if (cardType.co[card.type]) {
			// Whatevs
		} else {
			currentSup = parseInt(document.querySelector('.'+who+' .sup').textContent);
			document.querySelector('.'+who+' .sup').innerHTML = currentSup+3;
			drawCard(deck,1);
		}
	}

	console.log('Card played');
}

function testCard(card,action) {
	// Test a card against the hashed deck list
	// Return true if it exists
	if (opponentDeck[card.hash]) {
		if (action === 'draw') {
			conn.send({ 
				'func': 'drawCardConfirmed', 
				'card' : card,
				'who' : 'origin'
			});
		}
		else if (action === 'play') {
			conn.send({ 
				'func': 'playCard', 
				'card' : card,
				'who' : 'player'
			});

			playCard(card,'opponent');
		}
	}
}

// Draw a card 
function drawCard(deck,n,origin) {
	console.log('Drawing from: ',deck)

	n = typeof n !== 'undefined' ? n : 1;

	// Add to UI
	for (var i=0;i<n;i++) {

		// Play card from our deck
		var wannaplay = deck.pop();

		// Check against opponent to make sure it's legit
		if (origin != 'origin') {
			conn.send({ 
				'func'  : 'testCard', 
				'card'  : wannaplay,
				'who'   : 'origin',
				'action': 'draw'
			});
		}
	}
}

// Actually draw a real card
function drawCardConfirmed(card) {

	// DOM Stuff
	var newcard = document.querySelector('.hand').appendChild( document.createElement('div') )
	newcard.classList.add('card');
	newcard.setAttribute('id', card.id);
	newcard.setAttribute('data-type',card.type);

	newcard.addEventListener('click', function() {
		//console.log('Testing Card ',card);
		conn.send({ 
			'func'  : 'testCard', 
			'card'  : card,
			'who'   : 'origin',
			'action': 'play'
		});
	});
}

// Discard a card
function discardCard() {

}

// Zoom on card
function zoomCard() {

}